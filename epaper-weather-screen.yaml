esphome:
  name: "epaper-weather-screen"
  friendly_name: E-paper Weather Screen
  min_version: 2025.5.0
  name_add_mac_suffix: false
  on_boot:
    priority: -100
    then:
      - script.execute: http_req_openweathermap
      - logger.log: "Checking sleep"
      - lambda: |-
          if(id(remote_defeat).state) {
            ESP_LOGD("main", "Remote prevent sleep");
            id(deep_sleep_1).prevent_deep_sleep();
          } else {
            ESP_LOGD("main", "Remote allow sleep");
          }

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

deep_sleep:
  run_duration: 20s
  sleep_duration: 1780s
  id: deep_sleep_1

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

# Allow Over-The-Air updates
ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: True

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    password: !secret fallback_hotspot_password

captive_portal:

select:
  - platform: template
    name: "Language"
    id: language
    options:
      - "English"
      - "Polski"
    initial_option: "Polski"
    optimistic: true
    restore_value: True
    on_value:
      then:
        - component.update: my_display

spi:
  mosi_pin: GPIO6 # aka SDA
  clk_pin: GPIO7 # aka SCL

font:
  - file: "gfonts://Roboto"
    id: font22
    size: 22
    glyphsets:
      - GF_Latin_Core
      - GF_Latin_Plus
    extras:
      - file: "gfonts://Roboto+Flex"
        glyphs: ["↓↑"]
    ignore_missing_glyphs: True

  - file: "gfonts://Roboto"
    id: font24
    size: 24
    glyphsets:
      - GF_Latin_Core
      - GF_Latin_Plus
    ignore_missing_glyphs: True
    
  - file: "gfonts://Roboto"
    id: font48
    size: 48
    glyphsets:
      - GF_Latin_Core
      - GF_Latin_Plus
    ignore_missing_glyphs: True

globals:
  - id: current_image
    type: std::string
    initial_value: '"01d"'

  - id: current_unix_timestamp
    type: int

  - id: http_error
    type: bool

display:
  - platform: waveshare_epaper
    id: my_display
    model: 2.90inV2
    cs_pin: GPIO4
    dc_pin: GPIO3
    reset_pin: GPIO1
    busy_pin: GPIO0
    rotation: 90
    full_update_every: 1
    update_interval: never
    lambda: |-
      if (id(http_error)) {
        it.print(0, 0, id(font48), "HTTP error");
        return;
      }

      it.image(168, 0, weather_icon_map[id(current_image)]);

      time_t rawtime = (time_t) id(current_unix_timestamp);
      struct tm * timeinfo = localtime(&rawtime);

      bool isEnglish = id(language).state == "English";
      auto month_map = isEnglish ? month_map_en : month_map_pl;
      auto day_of_week = isEnglish ? day_of_week_en : day_of_week_pl;
      auto aq_index_map = isEnglish ? aq_index_en : aq_index_pl;
      
      it.printf(0, 0, id(font48), "%.1f°C", id(temperature).state);
      it.printf(0, 52, id(font24), "%02d %s (%s)", timeinfo->tm_mday, month_map[timeinfo->tm_mon + 1].c_str(), day_of_week[timeinfo->tm_wday].c_str());
      it.printf(0, 80, id(font22), "↓%.1f°C ↑%.1f°C", id(temperature_min).state, id(temperature_max).state);
      it.printf(0, 104, id(font22), "AQI: %s", aq_index_map[id(air_quality_index).state].c_str());

script:
  - id: http_req_openweathermap
    then:
      - http_request.get:
          url: !secret openweathermap_url
          capture_response: true
          max_response_buffer_size: 8192
          on_response:
            then:
              - logger.log:
                  format: "OpenWeatherMap - Response status: %d, Duration: %u ms"
                  args:
                    - response->status_code
                    - response->duration_ms
              - lambda: |-
                  json::parse_json(body, [](JsonObject root) -> bool {
                      JsonObject current = root["current"];
                      JsonObject daily = root["daily"][0];
                      JsonObject dailyTemp = daily["temp"];

                      id(temperature).publish_state(current["temp"]);
                      id(temperature_min).publish_state(dailyTemp["min"]);
                      id(temperature_max).publish_state(dailyTemp["max"]);

                      id(current_image) = std::string(daily["weather"][0]["icon"]);
                      id(current_unix_timestamp) = daily["dt"];
                      return true;
                  });
              - script.execute: http_req_gios
          on_error:
            then:
              - globals.set: 
                  id: http_error
                  value: 'true'
              - component.update: my_display
              - event.trigger: 
                  id: http_request_error
                  event_type: "http_request_error_openweathermap"
              - logger.log: "OpenWeatherMap - request failed!"

  - id: http_req_gios
    then:
      - http_request.get:
          url: !secret gios_url
          capture_response: true
          max_response_buffer_size: 8192
          on_response:
            then:
              - logger.log:
                  format: "GIOŚ - Response status: %d, Duration: %u ms"
                  args:
                    - response->status_code
                    - response->duration_ms
              - lambda: |-
                  json::parse_json(body, [](JsonObject root) -> bool {
                      JsonObject aqIndex = root["AqIndex"];
                      auto aqIndexValue = aqIndex["Wartość indeksu"];

                      id(air_quality_index).publish_state(aqIndexValue);
                      id(http_error) = false;
                      id(my_display).update();
                      return true;
                  });
          on_error:
            then:
              - globals.set: 
                  id: http_error
                  value: 'true'
              - component.update: my_display
              - event.trigger: 
                  id: http_request_error
                  event_type: "http_request_error_gios"
              - logger.log: "GIOŚ - request failed!"

http_request:
  
event:
  - id: http_request_error
    name: "HTTP request error"
    platform: template
    event_types:
      - http_request_error_openweathermap
      - http_request_error_gios

sensor:
  - platform: template
    name: "Temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    id: temperature
    internal: True

  - platform: template
    name: "Temperature min"
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    id: temperature_min
    internal: True

  - platform: template
    name: "Temperature max"
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    id: temperature_max
    internal: True

  - platform: template
    name: "Air quality index"
    id: air_quality_index
    internal: True

binary_sensor:
  - platform: status
    name: "Status"
    device_class: connectivity

  - platform: homeassistant
    name: "Remote Defeat Sleep"
    internal: True
    id: "remote_defeat"
    entity_id: input_boolean.defeat_sleep
    on_press:
      then:
        - logger.log: "Remote prevent sleep"
        - deep_sleep.prevent: deep_sleep_1
    on_release:
      then:
        - logger.log: "Remote allow sleep"
        - deep_sleep.allow: deep_sleep_1

mapping:
  - id: weather_icon_map
    from: string
    to: image
    entries:
      01d: img01d
      01n: img01n
      02d: img02d
      02n: img02n
      03d: img03d
      03n: img03n
      04d: img04d
      04n: img04n
      09d: img09d
      09n: img09n
      10d: img10d
      10n: img10n
      11d: img11d
      11n: img11n
      13d: img13d
      13n: img13n
      50d: img50d
      50n: img50n

  - id: month_map_pl
    from: int
    to: string
    entries:
      1: Sty
      2: Lut
      3: Mar
      4: Kwi
      5: Maj
      6: Cze
      7: Lip
      8: Sie
      9: Wrz
      10: Paź
      11: Lis
      12: Gru

  - id: month_map_en
    from: int
    to: string
    entries:
      1: Jan
      2: Feb
      3: Mar
      4: Apr
      5: May
      6: Jun
      7: Jul
      8: Aug
      9: Sep
      10: Oct
      11: Nov
      12: Dec

  - id: day_of_week_pl
    from: int
    to: string
    entries:
      0: Niedz
      1: Ponied
      2: Wtorek
      3: Środa
      4: Czwart
      5: Piątek
      6: Sobota

  - id: day_of_week_en
    from: int
    to: string
    entries:
      0: Sunday
      1: Monday
      2: Tuesd
      3: Wednes
      4: Thurs
      5: Friday
      6: Satur

  - id: aq_index_pl
    from: int
    to: string
    entries:
      0: Bardzo dobry
      1: Dobry
      2: Umiarkowany
      3: Dostateczny
      4: Zły
      5: Bardzo zły 

  - id: aq_index_en
    from: int
    to: string
    entries:
      0: Very good
      1: Good
      2: Moderate
      3: Fair
      4: Poor
      5: Very poor

image:
  - file: "epaper-weather-screen/icon/01d.png"
    id: img01d
    resize: 128x128
    type: BINARY
    invert_alpha: true

  - file: "epaper-weather-screen/icon/01n.png"
    id: img01n
    resize: 128x128
    type: BINARY
    invert_alpha: true

  - file: "epaper-weather-screen/icon/02d.png"
    id: img02d
    resize: 128x128
    type: BINARY
    invert_alpha: true

  - file: "epaper-weather-screen/icon/02n.png"
    id: img02n
    resize: 128x128
    type: BINARY
    invert_alpha: true

  - file: "epaper-weather-screen/icon/03d.png"
    id: img03d
    resize: 128x128
    type: BINARY
    invert_alpha: true

  - file: "epaper-weather-screen/icon/03n.png"
    id: img03n
    resize: 128x128
    type: BINARY
    invert_alpha: true

  - file: "epaper-weather-screen/icon/04d.png"
    id: img04d
    resize: 128x128
    type: BINARY
    invert_alpha: true

  - file: "epaper-weather-screen/icon/04n.png"
    id: img04n
    resize: 128x128
    type: BINARY
    invert_alpha: true

  - file: "epaper-weather-screen/icon/09d.png"
    id: img09d
    resize: 128x128
    type: BINARY
    invert_alpha: true

  - file: "epaper-weather-screen/icon/09n.png"
    id: img09n
    resize: 128x128
    type: BINARY
    invert_alpha: true

  - file: "epaper-weather-screen/icon/10d.png"
    id: img10d
    resize: 128x128
    type: BINARY
    invert_alpha: true

  - file: "epaper-weather-screen/icon/10n.png"
    id: img10n
    resize: 128x128
    type: BINARY
    invert_alpha: true

  - file: "epaper-weather-screen/icon/11d.png"
    id: img11d
    resize: 128x128
    type: BINARY
    invert_alpha: true

  - file: "epaper-weather-screen/icon/11n.png"
    id: img11n
    resize: 128x128
    type: BINARY
    invert_alpha: true

  - file: "epaper-weather-screen/icon/13d.png"
    id: img13d
    resize: 128x128
    type: BINARY
    invert_alpha: true

  - file: "epaper-weather-screen/icon/13n.png"
    id: img13n
    resize: 128x128
    type: BINARY
    invert_alpha: true

  - file: "epaper-weather-screen/icon/50d.png"
    id: img50d
    resize: 128x128
    type: BINARY
    invert_alpha: true

  - file: "epaper-weather-screen/icon/50n.png"
    id: img50n
    resize: 128x128
    type: BINARY
    invert_alpha: true
