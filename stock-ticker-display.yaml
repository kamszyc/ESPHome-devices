substitutions:
  eodhd_name: !secret eodhd_name

esphome:
  name: stock-ticker-display
  friendly_name: Stock Ticker Display

# github.com/esphome/issues/issues/5949
external_components:
  - source: github://hlfcode/esphome@main
    components: [ http_request ]

rp2040:
  board: rpipicow

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  manual_ip:
    static_ip: 192.168.1.124
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1

# Allow dimmable control of the backlight
output:
  - platform: rp2040_pwm
    pin: GPIO16
    id: gpio16

light:
  - platform: monochromatic
    output: gpio16
    name: "Backlight"
    restore_mode: RESTORE_AND_ON 

spi:
  clk_pin: GPIO6
  mosi_pin: GPIO7

display:
  - platform: mipi_spi
    model: ILI9341
    id: my_display
    invert_colors: false
    color_depth: 8
    dimensions:
      height: 240
      width: 320
      offset_height: 0
      offset_width: 0
    cs_pin: GPIO13
    reset_pin: GPIO14
    dc_pin: GPIO15
    rotation: 90
    data_rate: 80MHz
    update_interval: 10d # NEVER, screen is updated manually
    lambda: |-
      it.print(0, 0, id(font48), my_blue, "${eodhd_name}");
      it.printf(0, 60, id(font48), "%.2f€", id(msci_price).state);
      if (id(msci_price_change_percent).state >= 0)
        it.printf(0, 120, id(font48), my_green, "+%.2f%%", id(msci_price_change_percent).state);
      else
        it.printf(0, 120, id(font48), my_red, "(%.2f%%)", id(msci_price_change_percent).state);
      it.print(0, 180, id(font48), id(msci_date).state.c_str());

font:
  - file: "gfonts://Roboto"
    id: font40
    size: 40
  - file: "gfonts://Roboto"
    id: font48
    size: 48

sensor:
  - platform: template
    name: "MSCI ACWI Price EUR"
    id: msci_price
    unit_of_measurement: "€"
    accuracy_decimals: 2

  - platform: template
    name: "MSCI ACWI Price Change Percent"
    id: msci_price_change_percent
    unit_of_measurement: "%"
    accuracy_decimals: 2

text_sensor:
  - platform: template
    name: "MSCI ACWI Price Date"
    id: msci_date

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Warsaw

http_request:
  id: http_request_data
  timeout: 10s
  verify_ssl: false

interval:
  - interval: 2h
    then:
      - delay: 5s
      - http_request.get:
          url: !secret eodhd_url
          capture_response: true
          on_response:
            then:
              - logger.log:
                  format: "Response status: %d, Duration: %u ms"
                  args:
                    - response->status_code
                    - response->duration_ms
              - lambda: |-
                  json::parse_json(body, [](JsonObject root) {
                    if (root["close"].is<float>()) {
                      float price = root["close"];
                      id(msci_price).publish_state(price);
                      ESP_LOGI("main", "MSCI ACWI: €%.2f", price);
                    }
                    if (root["change_p"].is<float>()) {
                      float change_p = root["change_p"];
                      id(msci_price_change_percent).publish_state(change_p);
                    }
                    if (root["timestamp"].is<int>()) {
                      long timestamp = root["timestamp"];
                      time_t time_val = (time_t)timestamp;
                      struct tm* time_info = localtime(&time_val);
                      
                      char time_str[13];
                      strftime(time_str, sizeof(time_str), "%d.%m.%Y", time_info);
                      id(msci_date).publish_state(time_str);
                    }
                    id(my_display).update();
                    return true;
                  });

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%

  - id: my_green
    red: 0%
    green: 80%
    blue: 40%

  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%